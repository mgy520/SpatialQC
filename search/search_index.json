{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SpatialQC","text":"<p>SpatialQC is a spatial transcriptomic data quality control tool.  Available for Linux, Windows and macOS. Run SpatialQC and you will  get an HTML interactive report and clean data.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li><code>Installation</code> - SpatialQC installation instructions.</li> <li><code>Tutorial</code> - Examples of SpatialQC running on multiple ST platforms. SpatialQC divides the platform into three types:  (1) Image-based, such as MERFISH, Xenium, COSMX. (2) Sequence-based (single cell resolution), such as Stereo-seq,  Visium HD, Seq-scope, Pixel-seq, HDST. (3) Sequence-based (spot containing multiple cells), such as Visium,  ST, Slide-seq.</li> <li><code>CLI Reference</code> - Detail the command line parameters of SpatialQC.</li> <li><code>License</code> - MIT License</li> </ul>"},{"location":"CLI/","title":"CLI Reference","text":""},{"location":"CLI/#main-arguments","title":"Main arguments","text":"<p><code>--input</code>  None The path to your .h5ad or .rds file. Supports object: anndata, Seurat, SingleCellExperiment, SpatialExperiment. Note that the spatial coordinates of anndata objects are stored in obsm['spatial']. If your Seurat object does not have an images slot, the row and col coordinates need to be provided in meta.data. SingleCellExperiment must provide row and col coordinates.</p> <p><code>--platform</code>  None Platform of your spatial transcriptomics data. Visium, MERFISH, Stereo-seq, etc. Visium: Same as <code>--doublet False --n 0.95 --l 0.99 --s 4 --min_genes_list 0 200 400 600 800 1000 1200 --min_genes_list2 0 200 400 600 800 1000 1200 --min_cells_list 1 2 3 4 5</code>. Or set the parameter to 'Slide-seq', 'ST', 'DBiT-seq'. MERFISH: Same as <code>--doublet True --n 0.9 --min_cells 1 --s 3 --min_genes_list 0 10 20 30 40 50  --min_genes_list2 0 10 20 30 40 50 --min_cells_list 1 --s2 0 0 1</code>. Or set the parameter to 'Xenium', 'CosMx', 'HybISS'. Stereo-seq: Same as <code>--doublet True --n 0.7 --l 0.99 --s4 --min_genes_list 0 200 400 600 800 1000 1200 --min_genes_list2 0 200 400 600 800 1000 1200 --min_cells_list 0 10 20 30 40</code>. Or set the parameter to 'Seq-scope', 'Pixel-seq', 'HDST', 'Visium HD'.</p> <p><code>--slice_number</code>  multiple The number of slices of .h5ad provided. multiple or 1. </p> <p><code>--slice</code>   id The name that represents the slice identifier in <code>anndata.obs</code>. If there is only one slice, ignore this parameter.</p> <p><code>--mito</code>  'Mt-' The pattern of mitochondrial genes. </p> <p><code>--ribo</code>  'Rps, Rpl' The pattern of ribosome genes. </p> <p><code>--hemo</code>  'Hbb, Hba' The pattern of hemoglobin genes. </p>"},{"location":"CLI/#marker-genes-arguments","title":"Marker genes arguments","text":"<p><code>--markers</code>  None The path to your marker genes .csv file.  You can obtain genes based on prior knowledge or DEGs  from scRNA-seq of the same tissue. We also provided mouse and human marker genes obtained from the  cellmarker2.0 database. If you don't have a suitable markers file, you can specify the parameters <code>--species</code>, <code>--tissue_class</code>, <code>--tissue_type</code>, <code>--cancer_type</code>. If markers are not provided, set to False.</p> <p><code>--species</code>  None The species of your sample. Human or Mouse. </p> <p><code>--tissue_class</code>  None The tissue class of your sample. View options in CellMarker2.0. </p> <p><code>--tissue_type</code>  None The tissue type of your sample. View options in CellMarker2.0. </p> <p><code>--cancer_type</code>  Normal The cancer type of your sample. View options in CellMarker2.0. </p>"},{"location":"CLI/#filter-arguments","title":"Filter arguments","text":"<p><code>--f</code>  True Whether to filter .h5ad file. if False, generate only HTML report.</p> <p><code>--s</code>  5 Sections with a median score less than s will be removed.</p> <p><code>--n</code>  0.7 Determine the value of min_genes to ensure that the valid cell ratio is greater than <code>--n</code>. min_genes is adjusted to the nearest multiple of 10. If min_genes is already divisible by 10, it remains unchanged. Otherwise, min_genes is  rounded down to the nearest multiple of 10.</p> <p><code>--min_genes</code>  None Provide your min_genes, otherwise determined by <code>--n</code>.</p> <p><code>--l</code>  0.99  </p> <p>After filtering cells, determine the value of min_cells to ensure that the proportion of marker genes is greater than <code>--l</code> among the remaining detected markers.</p> <p><code>--min_cells</code>  None Provide your min_cells, otherwise determined by <code>--l</code>.</p> <p><code>--mito_percent</code>  0.1 Filter cells with mitochondrial proportion higher than <code>--mito_percent</code>.</p>"},{"location":"CLI/#cell-score-arguments","title":"Cell score arguments","text":"<p><code>--s1</code>  -1 0 percent.mt_score of the cell.  percent_mito &gt; <code>--mito_percent</code>: -1 percent_mito &lt;= <code>--mito_percent</code>: 0</p> <p><code>--s2</code>  0.8 0 1 log10GenesPerUMI_score of the cell. log10GenesPerUMI &lt; 0.8: 0 log10GenesPerUMI &gt;= 0.8: 1</p> <p><code>--s3</code>  0.2 0.5 0 1 2 n_genes_score of the cell. n_genes ranking below 20th percentile: 0 between 20th and 50th percentile: 1 above 50th percentile: 2</p> <p><code>--s4</code>  0.2 0.5 0.8 0 1 2 3 markerDetectionRatio_score of the cell. markerDetectionRatio ranking below 20th percentile: 0 between 20th and 50th percentile: 1 between 50th and 80th percentile: 2 above 80th percentile: 3</p> <p><code>--s5</code>  0.2 0.5 0.8 0 1 2 3] markerProportion_score of the cell. markerProportion_score ranking below 20th percentile: 0  between 20th and 50th percentile: 1 between 50th and 80th percentile: 2 above 80th percentile: 3</p> <p><code>--s6</code>  0.2 0.5 0.8 0 1 2 3 markerCountsRatio_score of the cell. markerCountsRatio_score ranking below 20th percentile: 0 between 20th and 50th percentile: 1 between 50th and 80th percentile: 2 above 80th percentile: 3</p> <p><code>--s7</code>  -4 0 doublet_score of the cell. doublet cells: -4 not doublet cells: 0</p> <p><code>--s8</code>  0.2 0.5 0 1 2 n_counts_score. n_counts ranking below 20th percentile: 0 between 20th and 50th percentile: 1 above 50th percentile: 2</p>"},{"location":"CLI/#options","title":"Options","text":"<p><code>--bin_value</code>  100 Values of n_genes bin intervals applied to the HTML button: Marker Proportion.</p> <p><code>--min_genes_list</code>  0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100 used for HTML buttons: Cell Number Post Filter, Markers Proportion Post Filter, Markers Detected Post Filter. </p> <p><code>--min_genes_list2</code>  0, 100, 200, 300, 400, 500, 600, 700 used for HTML button: Valid Cell Post min_genes.</p> <p><code>--min_cells_list</code>  3, 10, 20 used for html buttons: Markers Proportion Post Filter, Markers Detected Post Filter.</p> <p><code>--output</code>  ./ output directory.</p> <p><code>--o1</code>  report.html The filename for the output of html report.</p> <p><code>--o2</code>  filtered.h5ad The filename for the output of filtered .h5ad.</p> <p><code>--j</code>  8 The maximum number of concurrently running jobs. If set to 1, parallelism is not used. If set to -1, all CPUs are used. For n_jobs less than -1, (n_cpus + 1 + n_jobs) CPUs are used.</p>"},{"location":"Installation/","title":"Installation","text":"<p>To install SpatialQC, simply use pip:</p> <pre><code>pip install SpatialQC\n</code></pre> <p>For Windows. If you encounter the error: \"Microsoft Visual C++ 14.0 or greater  is required\" while installing annoy, we suggest  using <code>conda install conda-forge::python-annoy</code> for installation.  </p> <p>Once installed, you can verify the installation and get the help by :</p> <pre><code>SpatialQC -h\n</code></pre>"},{"location":"License/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 mgy520</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Tutorial/Analyze%20ST%20data/","title":"Analyze ST data","text":""},{"location":"Tutorial/Analyze%20ST%20data/#prepare-the-input-h5ad-file","title":"Prepare the input .h5ad file","text":"<p>Here, we apply SpatialQC to analyze the ST. The repository contains 48 Spatial Tancriptomics (ST) sections (24 of the  hippocampus and 24 of the olfactory bulb). The sections were obtained  from an Alzheimer\u00b4s disease mouse model: 3xAD, 3xPB, 3xPB and WT For each  section. Download the raw data for the 6 slices of Mouse Olfactory Bulb  (WT) dataset here for demonstration purposes.</p> <p>Then get the raw .h5ad file in jupyter with the following code:</p> <pre><code>import scanpy as sc\nfile_paths = ['ST/OFB_wt_rep1_ST.h5ad', 'ST/OFB_wt_rep2_ST.h5ad', 'ST/OFB_wt_rep3_ST.h5ad',\n              'ST/OFB_wt_rep4_ST.h5ad', 'ST/OFB_wt_rep5_ST.h5ad', 'ST/OFB_wt_rep6_ST.h5ad']\nadata_list = []\nfor i, file_path in enumerate(file_paths, start=1):\n    cdata = sc.read(file_path)\n    cdata.obs['slice'] = f's{i}'\n    adata_list.append(cdata)\nadata = sc.concat(adata_list, join='outer')\nadata.var_names_make_unique()\nadata.obs = adata.obs[['slice']]\nadata.write('ST.h5ad')\n</code></pre> <p>The data contained 6 slice, 1311 cells and 17979 genes. The coordinates are  stored in anndata.obs['spatial']. Slice information is stored in anndata.obs['slice'].</p> <p></p>"},{"location":"Tutorial/Analyze%20ST%20data/#prepare-the-input-marker-genes-csv-file","title":"Prepare the input marker genes .csv file","text":"<p>Download the marker genes from Tepe et al. (2018).</p> <pre><code>import pandas as pd\n!wget https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6342206/bin/NIHMS1516652-supplement-2.xls\nmark=pd.read_csv('NIHMS1516652-supplement-2.xls',sep='\\t')\nmark.gene.to_csv('markers.csv',index=False)\n</code></pre>"},{"location":"Tutorial/Analyze%20ST%20data/#quality-control","title":"Quality control","text":"<p>Features of ST: (1) spot containing multiple cells; (2) high depth;  (3)The number of spots is usually small. Hence, choose Visium platform.</p> <p>Execute SpatialQC in the shell terminal:</p> <pre><code>SpatialQC --adata ST.h5ad --markers markers.csv --platform Visium --slice slice --mito 'mt-'\n</code></pre> <pre><code>151507 score: 6.0\n151508 score: 5.0\n151509 score: 6.0\n151510 score: 6.0\n151669 score: 7.0\n151670 score: 7.0\n151671 score: 7.0\n151672 score: 7.0\n151673 score: 10.0\n151674 score: 11.0\n151675 score: 8.0\n151676 score: 9.0\nNumber of detected doublets: 0\nAutomatic threshold for n_genes is: 490\nCount of cells with mitochondrial gene percentage greater than 0.3: 235\nThe suitable threshold for n_cells is: 2\n</code></pre> <p>--platform Visium same as: --doublet False --n 0.95 --l 0.99 --s 4 --min_genes_list 0 200 400 600 800 1000 1200 --min_genes_list2 0 200 400 600 800 1000 1200 --min_cells_list 1 2 3 4 5. Users can specify which parameter overrides they want to modify.  Keep the default values here.  The html output can be downloaded at github.</p> <p>As the terminal output shows, All slices have a median score greater than 4.</p> <p> Since Visium spots contain multiple cells, the doublet setting is set to False,  detecting 0 doublet cells. To preserve more than 95% of the available spots,  spots with less than 490 n_genes were deleted.    To preserve more than 99% of the detected marker genes, genes with fewer than 2 cells were removed.  Clean data after filtering: </p>"},{"location":"Tutorial/Analyze%20ST%20data/#downstream-analysis-with-scanpy-and-graphst","title":"Downstream analysis with scanpy and GraphST","text":"<pre><code>import scanpy as sc\nfrom GraphST.utils import clustering\nfrom GraphST import GraphST\nadata = sc.read_h5ad('DLPFC/filtered.h5ad')\nadata=adata[adata.obs.slice == '151673']\nmodel = GraphST.GraphST(adata, device='cuda')\nadata = model.train()\nradius = 50\nclustering(adata, 7, radius=radius, method='mclust', refinement=True)\nsc.pl.spatial(adata,spot_size=100, color=[\"domain\"], show=True)\n</code></pre> <pre><code>sc.pp.neighbors(adata, use_rep='emb_pca', n_neighbors=10)\nsc.tl.umap(adata)\nsc.pl.umap(adata, color='domain', title=['Predicted labels'], show=True)\n</code></pre>"},{"location":"Tutorial/Analyze%20Visium%20HD%20data/","title":"Analyze Visium HD data","text":""},{"location":"Tutorial/Analyze%20Visium%20HD%20data/#prepare-the-input-h5ad-file","title":"Prepare the input .h5ad file","text":"<p>Here, we apply SpatialQC to analyze the Visium HD data. The sample is a mouse small intestine tissue block (FFPE) from Charles River Laboratories. Sequencing was performed on an Illumina NovaSeq 6000 platform.</p> <p>We can get the raw .h5ad file in jupyter with the following code:</p> <pre><code>!wget https://s3.embl.de/spatialdata/spatialdata-sandbox/visium_hd_3.0.0_io.zip\n!unzip *zip\nimport spatialdata as sd\nsdata = sd.read_zarr('data.zarr')\nfor table in sdata.tables.values():\n    table.var_names_make_unique()\nfrom spatialdata_io.experimental import to_legacy_anndata\na=to_legacy_anndata(sdata,table_name='square_016um',coordinate_system='downscaled_hires')\na.write('visium_hd.h5ad')\n</code></pre> <p>The data contained 1 slice, 91,033 cells and 19,059 genes. The coordinates are  stored in anndata.obs['spatial'].</p> <p></p>"},{"location":"Tutorial/Analyze%20Visium%20HD%20data/#quality-control","title":"Quality control","text":"<p>Features of Visium HD: (1) single-cell resolution; (2) Low depth. Other  similar techniques include Stereo-seq, Seq-scope, Pixel-seq, HDST. These  techniques essentially operate at subcellular resolution, typically requiring cell segmentation or binning to merge multiple transcripts into one \"cell\". Typically, the diameter of a single \"cell\" ranges from 10 to 100 \u03bcm.</p> <p>Execute SpatialQC in the shell terminal:</p> <pre><code>SpatialQC --adata visium_hd.h5ad --platform Stereo-seq --slice_number 1 --mito 'mt-' --species Mouse --tissue_class Intestine --tissue_type 'Small intestine' --cancer_type Normal --l 1\n</code></pre> <pre><code>slice1 score: 9.0\nNumber of detected doublets: 585\nAutomatic threshold for n_genes is: 510\nCount of cells with mitochondrial gene percentage greater than 0.1: 42\nThe suitable threshold for n_cells is: 27\n</code></pre> <p>--platform Stereo-seq same as: --doublet True --n 0.7 --l 0.99 --s4 --min_genes_list 0 200 400 600 800 1000 1200 --min_genes_list2 0 200 400 600 800 1000 1200 --min_cells_list 0 10 20 30 40. Users can specify which parameter overrides they want to modify.  Here we set the threshold for --l 1, n_cells to preserve all detected genes.  The html output can be downloaded at github.</p> <p>As the terminal output shows, the only slice has a median score of 9. 585 doublet cells were detected and removed. To preserve more than 70% of the available cells,  cells with less than 510 n_genes were deleted. 42 cells with a mitochondrial gene ratio greater than 0.1 were removed. Finally, at the gene level, all detected marker genes were retained, with a threshold of 27 for n_cells.</p> <p> Clean data after filtering: </p>"},{"location":"Tutorial/Analyze%20Visium%20HD%20data/#downstream-analysis-with-scanpy-and-squidpy","title":"Downstream analysis with Scanpy and Squidpy","text":"<pre><code>import scanpy as sc\nadata = sc.read_h5ad('filtered.h5ad')\nadata.layers[\"counts\"] = adata.X.copy()\nsc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.tl.leiden(adata)\nsc.pl.umap(adata, color=[\"leiden\"], wspace=0.4)\n</code></pre> <pre><code>import squidpy as sq\nsq.pl.spatial_scatter(adata, shape=None, color=[\"leiden\"], wspace=0.4)\n</code></pre> <p> Plot the clustering on spatial coordinates.</p> <p>Neighbors enrichment analysis</p> <pre><code>sq.gr.spatial_neighbors(adata, coord_type=\"generic\", delaunay=True)\nsq.gr.nhood_enrichment(adata, cluster_key=\"leiden\")\nsq.pl.nhood_enrichment(\n    adata,\n    cluster_key=\"leiden\",\n    title=\"Neighborhood enrichment adata\"\n)\n</code></pre> <p></p>"},{"location":"Tutorial/Analyze%20Visium%20data/","title":"Analyze Visium data","text":""},{"location":"Tutorial/Analyze%20Visium%20data/#prepare-the-input-h5ad-file","title":"Prepare the input .h5ad file","text":"<p>Here, we apply SpatialQC to analyze the human postmortem DLPFC (neurotypical) data by 10x Visium.  DLPFC data contains expression values of 33,538 genes measured on two pairs of tissue sections from three independent neurotypical adult donors. Each pair consisted of two directly adjacent, 10 \u03bcm serial tissue sections with the second pair located 300 \u03bcm posterior to the first, resulting in a total of 12 tissue sections. Download the raw .h5ad files for the 12 slices here.</p> <p>Then get the raw .h5ad file in jupyter with the following code:</p> <pre><code>import scanpy as sc\nimport os\ncurrent_directory = \"./\"\nadata = None\nfor filename in os.listdir(current_directory):\n    if filename.endswith(\".h5ad\"):\n        slice_value = filename.split(\"_\")[0]\n        cdata = sc.read_h5ad(filename)\n        cdata.obs['slice'] = slice_value\n        if adata is None:\n            adata = cdata\n        else:\n            adata = adata.concatenate(cdata, join='outer',batch_key=None)\n\nadata.write_h5ad('dlpfc.h5ad')\n</code></pre> <p>The data contained 12 slice, 47,681 cells and 33,538 genes. The coordinates are  stored in anndata.obs['spatial']. Slice information is stored in anndata.obs['slice'].</p> <p></p>"},{"location":"Tutorial/Analyze%20Visium%20data/#prepare-the-input-marker-genes-csv-file","title":"Prepare the input marker genes .csv file","text":"<p>Download the top 40 marker genes for DLPFC here in an Excel sheet.</p> <pre><code>import pandas as pd\ndf = pd.read_excel('mmc6.xlsx',sheet_name='ST5b_DLPFC_top40markers')\npd.Series(df.values.flatten()).dropna().to_csv('markers.csv', index=False, header=['gene'])\n</code></pre>"},{"location":"Tutorial/Analyze%20Visium%20data/#quality-control","title":"Quality control","text":"<p>Features of Visium: (1) spot containing multiple cells; (2) high depth;  (3)The number of spots is usually small. Other similar techniques include ST (spatial transcriptomics), Slide-seq, and DBiT-seq.</p> <p>Execute SpatialQC in the shell terminal:</p> <pre><code>SpatialQC --adata dlpfc.h5ad --markers markers.csv --platform Visium --slice slice --mito 'MT-' --ribo 'RPS,RPL' --mito_percent 0.3\n</code></pre> <pre><code>151507 score: 6.0\n151508 score: 5.0\n151509 score: 6.0\n151510 score: 6.0\n151669 score: 7.0\n151670 score: 7.0\n151671 score: 7.0\n151672 score: 7.0\n151673 score: 10.0\n151674 score: 11.0\n151675 score: 8.0\n151676 score: 9.0\nNumber of detected doublets: 0\nAutomatic threshold for n_genes is: 490\nCount of cells with mitochondrial gene percentage greater than 0.3: 235\nThe suitable threshold for n_cells is: 2\n</code></pre> <p>--platform Visium same as: --doublet False --n 0.95 --l 0.99 --s 4 --min_genes_list 0 200 400 600 800 1000 1200 --min_genes_list2 0 200 400 600 800 1000 1200 --min_cells_list 1 2 3 4 5. Users can specify which parameter overrides they want to modify.  Keep the default values here.  The html output can be downloaded at github.</p> <p>As the terminal output shows, All slices have a median score greater than 4.</p> <p> Since Visium spots contain multiple cells, the doublet setting is set to False,  detecting 0 doublet cells. To preserve more than 95% of the available spots,  spots with less than 490 n_genes were deleted.    To preserve more than 99% of the detected marker genes, genes with fewer than 2 cells were removed.  Clean data after filtering: </p>"},{"location":"Tutorial/Analyze%20Visium%20data/#downstream-analysis-with-scanpy-and-graphst","title":"Downstream analysis with scanpy and GraphST","text":"<pre><code>import scanpy as sc\nfrom GraphST.utils import clustering\nfrom GraphST import GraphST\nadata = sc.read_h5ad('DLPFC/filtered.h5ad')\nadata=adata[adata.obs.slice == '151673']\nmodel = GraphST.GraphST(adata, device='cuda')\nadata = model.train()\nradius = 50\nclustering(adata, 7, radius=radius, method='mclust', refinement=True)\nsc.pl.spatial(adata,spot_size=100, color=[\"domain\"], show=True)\n</code></pre> <pre><code>sc.pp.neighbors(adata, use_rep='emb_pca', n_neighbors=10)\nsc.tl.umap(adata)\nsc.pl.umap(adata, color='domain', title=['Predicted labels'], show=True)\n</code></pre>"},{"location":"Tutorial/Analyze%20Vizgen%20MERFISH%20data/","title":"Analyze Vizgen MERFISH data","text":""},{"location":"Tutorial/Analyze%20Vizgen%20MERFISH%20data/#prepare-the-input-h5ad-file","title":"Prepare the input .h5ad file","text":"<p>Download the data from Vizgen MERFISH Mouse Brain Receptor Dataset.  Unpack the .tar.gz file. The dataset contains a MERFISH measurement of  a gene panel containing 483 total genes including canonical brain cell  type markers, GPCRs, and RTKs measured on 3 full coronal slices across  3 biological replicates. This is one slice of replicate 1.</p> <p>The data needs to be downloaded manually. Users need to sign up for Google cloud. Then get the raw .h5ad file in jupyter with the following code:</p> <pre><code>import squidpy as sq\nadata = sq.read.vizgen(\n    path='MERFISH/',\n    counts_file=\"datasets_mouse_brain_map_BrainReceptorShowcase_Slice1_Replicate1_cell_by_gene_S1R1.csv\",\n    meta_file=\"datasets_mouse_brain_map_BrainReceptorShowcase_Slice1_Replicate1_cell_metadata_S1R1.csv\",\n    transformation_file=\"datasets_mouse_brain_map_BrainReceptorShowcase_Slice1_Replicate1_images_micron_to_mosaic_pixel_transform.csv\",\n)\nadata.write('vizgen.h5ad')\n</code></pre> <p>The data contained 1 slice, 78,329 cells and 483 genes. The coordinates are  stored in anndata.obs['spatial']. </p>"},{"location":"Tutorial/Analyze%20Vizgen%20MERFISH%20data/#quality-control","title":"Quality control","text":"<p>Features of image-based spatial transcriptome technology: (1) single-cell  resolution; (2) Low depth; (3) Genes are marker genes of prior design.  </p> <p>Execute SpatialQC in the shell terminal:</p> <pre><code>SpatialQC --adata vizgen.h5ad --platform MERFISH --slice_number 1\n</code></pre> <pre><code>slice1 score: 4.0  \nNumber of detected doublets: 6679  \nAutomatic threshold for n_genes is: 30  \nCount of cells with mitochondrial gene percentage greater than 0.1: 0  \nUsing user-provided min_cells: 1  \n</code></pre> <p>--platform MERFISH same as: --doublet True --n 0.9 --min_cells 1 --s 3  --min_genes_list 0 10 20 30 40 50 --min_genes_list2 0 10 20 30 40 50  --min_cells_list 1 --s2 0 0 1. Users can specify which parameter overrides they want to modify.  Keep the default values here.  The html output can be downloaded at github.</p> <p>As the terminal output shows, the only slice has a score of 4; 6679 doublet cells were detected and removed. To preserve more than 90% of the available cells,  cells with less than 30 n_genes were deleted. All marker genes from the MERFISH data are retained.</p> <p> Clean data after filtering: </p>"},{"location":"Tutorial/Analyze%20Vizgen%20MERFISH%20data/#downstream-analysis-with-scanpy-and-squidpy","title":"Downstream analysis with scanpy and squidpy","text":"<p>Visualize the Leiden clustering with cells divided into 34 clusters.</p> <pre><code>import scanpy as sc\nadata = sc.read_h5ad('filtered.h5ad')\nadata.layers[\"counts\"] = adata.X.copy()\nsc.pp.highly_variable_genes(adata, flavor=\"seurat_v3\", n_top_genes=4000)\nsc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.tl.leiden(adata)\nsc.pl.umap(adata, color=[\"leiden\"], wspace=0.4)\n</code></pre> <p></p> <pre><code>import squidpy as sq\nsq.pl.spatial_scatter(adata, shape=None, color=[\"leiden\"], wspace=0.4)\n</code></pre> <p> Plot the clustering on spatial coordinates. Most clusters exhibit highly  specific spatial patterns. Users can annotate cell types using differential gene expression or label transfer.</p> <p>Neighbors enrichment analysis</p> <pre><code>sq.gr.spatial_neighbors(adata, coord_type=\"generic\", delaunay=True)\nsq.gr.nhood_enrichment(adata, cluster_key=\"leiden\")\nsq.pl.nhood_enrichment(\n    adata,\n    cluster_key=\"leiden\",\n    title=\"Neighborhood enrichment adata\",\n)\n</code></pre> <p></p>"},{"location":"Tutorial/Analyze%20Xenium%20data/","title":"Analyze Xenium data","text":""},{"location":"Tutorial/Analyze%20Xenium%20data/#prepare-the-input-h5ad-file","title":"Prepare the input .h5ad file","text":"<p>Download the Feature-cell Matrix (HDF5) and the Cell summary file (CSV) from the Xenium breast cancer tumor microenvironment Dataset.</p> <p>Then get the raw .h5ad file in jupyter with the following code:</p> <pre><code>import scanpy as sc\nimport pandas as pd\n!mkdir tutorial_data\n!mkdir tutorial_data/xenium_data\n!wget -P tutorial_data/xenium_data/ https://cf.10xgenomics.com/samples/xenium/preview/Xenium_FFPE_Human_Breast_Cancer_Rep1/Xenium_FFPE_Human_Breast_Cancer_Rep1_cell_feature_matrix.h5\n!wget -P tutorial_data/xenium_data/ https://cf.10xgenomics.com/samples/xenium/preview/Xenium_FFPE_Human_Breast_Cancer_Rep1/Xenium_FFPE_Human_Breast_Cancer_Rep1_cells.csv.gz\n!tar -xzf tutorial_data/xenium_data/Xenium_FFPE_Human_Breast_Cancer_Rep1_cells.csv.gz -C tutorial_data/xenium_data/\n\nadata = sc.read_10x_h5(\n    filename=\"tutorial_data/xenium_data/Xenium_FFPE_Human_Breast_Cancer_Rep1_cell_feature_matrix.h5\"\n)\ndf = pd.read_csv(\n    \"tutorial_data/xenium_data/Xenium_FFPE_Human_Breast_Cancer_Rep1_cells.csv\"\n)\ndf.set_index(adata.obs_names, inplace=True)\nadata.obs = df.copy()\nadata.obsm[\"spatial\"] = adata.obs[[\"x_centroid\", \"y_centroid\"]].copy().to_numpy()\nadata.write('xenium.h5ad')\n</code></pre> <p>The data contained 1 slice, 167782 cells and 313 genes. The coordinates are  stored in anndata.obs['spatial']. </p>"},{"location":"Tutorial/Analyze%20Xenium%20data/#quality-control","title":"Quality control","text":"<p>Features of image-based spatial transcriptome technology: (1) single-cell  resolution; (2) Low depth; (3) Genes are marker genes of prior design.  </p> <p>Execute SpatialQC in the shell terminal:</p> <pre><code>SpatialQC --adata xenium.h5ad --platform MERFISH --slice_number 1\n</code></pre> <pre><code>slice1 score: 5.0  \nNumber of detected doublets: 109  \nAutomatic threshold for n_genes is: 30  \nCount of cells with mitochondrial gene percentage greater than 0.1: 0  \nUsing user-provided min_cells: 1  \n</code></pre> <p>--platform MERFISH same as: --doublet True --n 0.9 --min_cells 1 --s 3  --min_genes_list 0 10 20 30 40 50 --min_genes_list2 0 10 20 30 40 50  --min_cells_list 1 --s2 0 0 1. Users can specify which parameter overrides they want to modify.  Keep the default values here.  The html output can be downloaded at github.</p> <p>As the terminal output shows, the only slice has a score of 5; 109 double cells were detected and removed. To preserve more than 90% of the available cells,  cells with less than 30 n_genes were deleted. All marker genes from the Xenium data are retained.</p> <p> Clean data after filtering: </p>"},{"location":"Tutorial/Analyze%20Xenium%20data/#downstream-analysis-with-scanpy-and-squidpy","title":"Downstream analysis with scanpy and squidpy","text":"<p>Visualize the Leiden clustering with cells divided into 14 clusters.</p> <pre><code>import scanpy as sc\nadata = sc.read_h5ad('filtered.h5ad')\nadata.layers[\"counts\"] = adata.X.copy()\nsc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.tl.leiden(adata)\nsc.pl.umap(adata, color=[\"leiden\"], wspace=0.4)\n</code></pre> <p></p> <pre><code>import squidpy as sq\nsq.pl.spatial_scatter(adata, library_id=\"spatial\", shape=None, color=[\"leiden\"], wspace=0.4)\n</code></pre> <p> Plot the clustering on spatial coordinates.</p> <p>Neighbors enrichment analysis</p> <pre><code>sq.gr.spatial_neighbors(adata, coord_type=\"generic\", delaunay=True)\nsq.gr.nhood_enrichment(adata, cluster_key=\"leiden\")\nsq.pl.nhood_enrichment(adata, cluster_key=\"leiden\", title=\"Neighborhood enrichment adata\")\n</code></pre> <p></p>"}]}